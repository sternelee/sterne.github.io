<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[STERNE]]></title>
  <subtitle><![CDATA[SterneLee's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sterne.me/"/>
  <updated>2016-02-22T10:23:07.764Z</updated>
  <id>http://sterne.me/</id>
  
  <author>
    <name><![CDATA[Sterne Lee]]></name>
    <email><![CDATA[sternelee@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[pageSwitch使用与修改]]></title>
    <link href="http://sterne.me/2016/02/22/pageSwitch-use/"/>
    <id>http://sterne.me/2016/02/22/pageSwitch-use/</id>
    <published>2016-02-22T10:08:23.000Z</published>
    <updated>2016-02-22T10:23:07.764Z</updated>
    <content type="html"><![CDATA[<h2 id="pageSwitch__u7B80_u4ECB"><a href="#pageSwitch__u7B80_u4ECB" class="headerlink" title="pageSwitch 简介"></a>pageSwitch 简介</h2><p>pageSwitch适用场景为全屏切换，即一切一屏，移动与web端单页切换，制作翻页H5等等，并且在此基础上实现了超过一百种切换效果。</p>
<p>GitHub地址：<a href="https://github.com/qiqiboy/pageSwitch" target="_blank" rel="external">https://github.com/qiqiboy/pageSwitch</a></p>
<h2 id="pageSwitch_u4FEE_u6539"><a href="#pageSwitch_u4FEE_u6539" class="headerlink" title="pageSwitch修改"></a>pageSwitch修改</h2><p>由于原作者版本没有区别当前页面的标签，<br><a id="more"></a><br>因此在原基本上修改了firePlay函数，大约在840行左右。原firePlay函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">firePlay:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self=<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.playing)&#123;</span><br><span class="line">            <span class="keyword">this</span>.playTimer=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                self.slide((self.current+<span class="number">1</span>)%(self.loop?<span class="literal">Infinity</span>:self.length));</span><br><span class="line">                &#125;,<span class="keyword">this</span>.interval);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在此基本上，为了让当前显示页面添加标识，为便当前操作，内容动画更改等提供接口，修改如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">firePlay:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self=<span class="keyword">this</span>;</span><br><span class="line">        each(self.pages,<span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pcn=page.className.replace(<span class="regexp">/\s+current/g</span>,<span class="string">""</span>);</span><br><span class="line">            page.className=pcn;</span><br><span class="line">        &#125;);</span><br><span class="line">        self.pages[self.current].className +=<span class="string">' current'</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.playing)&#123;</span><br><span class="line">            <span class="keyword">this</span>.playTimer=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                self.slide((self.current+<span class="number">1</span>)%(self.loop?<span class="literal">Infinity</span>:self.length));</span><br><span class="line">            &#125;,<span class="keyword">this</span>.interval);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>也就在给予当前显示页面加上class=current，这样更方便页面内元素与动画的操作与实现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="pageSwitch__u7B80_u4ECB"><a href="#pageSwitch__u7B80_u4ECB" class="headerlink" title="pageSwitch 简介"></a>pageSwitch 简介</h2><p>pageSwitch适用场景为全屏切换，即一切一屏，移动与web端单页切换，制作翻页H5等等，并且在此基础上实现了超过一百种切换效果。</p>
<p>GitHub地址：<a href="https://github.com/qiqiboy/pageSwitch">https://github.com/qiqiboy/pageSwitch</a></p>
<h2 id="pageSwitch_u4FEE_u6539"><a href="#pageSwitch_u4FEE_u6539" class="headerlink" title="pageSwitch修改"></a>pageSwitch修改</h2><p>由于原作者版本没有区别当前页面的标签，<br>]]>
    
    </summary>
    
      <category term="H5" scheme="http://sterne.me/tags/H5/"/>
    
      <category term="js" scheme="http://sterne.me/tags/js/"/>
    
      <category term="前端" scheme="http://sterne.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[reactjs学习体验]]></title>
    <link href="http://sterne.me/2016/01/15/react-start/"/>
    <id>http://sterne.me/2016/01/15/react-start/</id>
    <published>2016-01-15T03:46:56.000Z</published>
    <updated>2016-01-15T04:03:58.321Z</updated>
    <content type="html"><![CDATA[<h2 id="reactjs__u662F_u4EC0_u4E48_uFF1F"><a href="#reactjs__u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="reactjs 是什么？"></a>reactjs 是什么？</h2><p>reactjs是来自facebook公司的用于构建用户界面的JavaScript库。</p>
<p>GitHub地址：<a href="https://github.com/facebook/react" target="_blank" rel="external">https://github.com/facebook/react</a></p>
<h2 id="reactjs_u7684_u4E24_u4E2A_u884D_u751F_u9879_u76EE_u4E5F_u503C_u5F97_u6CE8_u610F_u3002"><a href="#reactjs_u7684_u4E24_u4E2A_u884D_u751F_u9879_u76EE_u4E5F_u503C_u5F97_u6CE8_u610F_u3002" class="headerlink" title="reactjs的两个衍生项目也值得注意。"></a>reactjs的两个衍生项目也值得注意。</h2><ul>
<li>react-native:用reactjs写手机app </li>
</ul>
<p>GitHub地址：<a href="https://github.com/facebook/react-native" target="_blank" rel="external">https://github.com/facebook/react-native</a></p>
<ul>
<li>react-canvas:用canvas代替臃肿缓慢的DOM作为UI，在移动端获得能与原生应用媲美的流畅效果<a id="more"></a>
GitHub地址：<a href="https://github.com/Flipboard/react-canvas" target="_blank" rel="external">https://github.com/Flipboard/react-canvas</a> </li>
</ul>
<h2 id="reactjs__u771F_u7684_u5C06html/xml_u548Cjs_u4EE3_u7801_u6DF7_u6742_u5728_u4E00_u8D77_u5417_uFF1F"><a href="#reactjs__u771F_u7684_u5C06html/xml_u548Cjs_u4EE3_u7801_u6DF7_u6742_u5728_u4E00_u8D77_u5417_uFF1F" class="headerlink" title="reactjs 真的将html/xml和js代码混杂在一起吗？"></a>reactjs 真的将html/xml和js代码混杂在一起吗？</h2><p>reactjs的jsx语法，让许多人感觉仿佛回到了原始社会。这么多年努力地让html\css\javascript三者分离，好不容易走到今天，reactjs却走回老路，让人难以接受。我也几次三番因为jsx而放弃了解reactjs。</p>
<p>目前体验下来，发觉那是误解。</p>
<p>reactjs比其他前端模板引擎更彻底的分离html与javascript。前端模板引擎，绝大多数基于html字符串；而reactjs不是。能接受前端模板引擎的人，也能接受jsx。</p>
<p>jsx的实质是：用xml的语法写函数调用。它没有拼接html字符串，也不要求一定要使用jsx，手写函数调用，也是可以的。</p>
<p>在原生DOM中，用js构造dom的方式是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要构造的dom：</span></span><br><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"link"</span> href=<span class="string">"https://github.com/facebook/react"</span>&gt;React&lt;a&gt;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">a.setAttribute(<span class="string">'class'</span>, <span class="string">'link'</span>)</span><br><span class="line">a.setAttribute(<span class="string">'href'</span>, <span class="string">'https://github.com/facebook/react'</span>)</span><br><span class="line">a.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'React'</span>))</span><br></pre></td></tr></table></figure>
<p>如你所见，它颇为繁琐，我们可以封装一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数为node名</span></span><br><span class="line"><span class="comment">//第二个参数为一个对象，dom属性与事件都以键值对的形式书写</span></span><br><span class="line"><span class="comment">//第三个到第n个为子node，它们将按参数顺序出现，</span></span><br><span class="line"><span class="comment">//在这个例子中只有一个子元素，而且也是文本元素，所以可以直接书写，否则还得React.createElement一下</span></span><br><span class="line"><span class="keyword">var</span> a = React.createElement(<span class="string">'a'</span>, &#123;</span><br><span class="line">    className: <span class="string">'link'</span>,</span><br><span class="line">    href: <span class="string">'https://github.com/facebook/react'</span></span><br><span class="line">&#125;, <span class="string">'React'</span>)</span><br></pre></td></tr></table></figure></p>
<p>如上，从html语法到js构造dom，再到React.createElement的封装。</p>
<p>现在有个编译工具，可以让你用html语法来写React.createElement，部署上线前编译回来。你愿意吗？</p>
<p>不管你的答案是什么，但这就是jsx的一半真相。</p>
<p>正是由于jsx不是html字符串，所以有如下特点：</p>
<ul>
<li>html的class与for属性在js里是保留字，所以jsx里要用别名className与htmlFor</li>
<li>不能像下面那样操作html的checked属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在其他前端模板引擎中，可以这么做，因为是拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> &#123;<span class="attribute">this.props.selected</span> ? '<span class="attribute">checked</span>' <span class="attribute">:</span> ''&#125; /&gt;</span></span><br><span class="line"></span><br><span class="line">//但在jsx中，这是错误的，因为无法构成键值对，一定要有个key=value的格式，所以得这样</span><br><span class="line">var checkbox = <span class="tag">&lt;<span class="title">input</span> <span class="attribute">className</span>=<span class="value">"class是js的保留字"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span>=<span class="value">&#123;this.props.selected&#125;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//编译后：</span><br><span class="line">var checkbox = React.createElement('input', &#123;</span><br><span class="line">    type: 'checkbox',</span><br><span class="line">    className: 'class是js的保留字',</span><br><span class="line">    checked: this.props.selected</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>不能直接写并列的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是错误的</span></span><br><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span>first div<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">div</span>&gt;</span>second div<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//因为编译后，return 两个函数调用，就算不报错，也只调用第一个函数，不合意图</span><br><span class="line">var MyComponent = React.createClass(&#123;</span><br><span class="line">    render: function() &#123;</span><br><span class="line">        return React.createElement('div', null, 'first div') React.createElement('div', null, 'second div')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//所以有时难免要增加dom层级</span><br><span class="line">var MyComponent = React.createClass(&#123;</span><br><span class="line">    render: function() &#123;</span><br><span class="line">        return (</span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span>&gt;</span>first div<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span>&gt;</span>second div<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译后,合乎语法和编程意图了</span></span><br><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, </span><br><span class="line">            React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">'first div'</span>),</span><br><span class="line">            React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">'second div'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>jsx要求标签一定要闭合，html5中不强制要求闭合的，在jsx也都要闭合，以便识别</p>
</li>
<li>封装的组件要用大写字母开头，以便跟html标签区分。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不合规则</span></span><br><span class="line">&lt;tap /&gt;</span><br><span class="line"><span class="comment">//合乎规则</span></span><br><span class="line">&lt;Tap /&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="reactjs_u4E0Eweb_component"><a href="#reactjs_u4E0Eweb_component" class="headerlink" title="reactjs与web component"></a>reactjs与web component</h2><p>web component是下一代的前端标准，提供了shadow dom、templete元素、Imports与自定义元素的功能。其中自定义元素提供了生命周期回调函数:</p>
<ul>
<li>createdCallback: 创建时调用</li>
<li>attachedCallback: 添加到dom树时调用</li>
<li>detachedCallback: 从dom树衣橱时调用</li>
<li>attributeChangedCallback：属性改变时调用</li>
</ul>
<p>在reactjs中也有相似但更丰富的生命周期方法：</p>
<ul>
<li>componentWillMount: 初始化渲染前调用</li>
<li>componentDidMount: 初始化渲染后调用</li>
<li>componentWillReceiveProps： 接受新props时调用</li>
<li>shouldComponentUpdate：接受新props或state时调用，返回值true/false决定是否更新视图</li>
<li>componentWillUpdate: 在接收到新的 props 或者 state 之前立刻调用。在初始化渲染的时候该方法不会被调用</li>
<li>componentDidUpdate：在组件的更新已经同步到 DOM 中之后立刻被调用</li>
<li>componentWillUnmount: 在组件从 DOM 中移除的时候立刻被调用</li>
</ul>
<p>reactjs与web component的关系，在我个人看来：reactjs是纯js实现的一种component标准，它可以与DOM无关，甚至与Web无关。    </p>
<p>在reactjs中注册组件像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reactjs跟objective-c在方法命名上有些相似，使劲儿用全称，与传统js编程的缩写习惯相悖</span></span><br><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">    <span class="comment">//每个组件必须有render方法</span></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">&#123;this.props.className&#125;</span>&gt;</span></span><br><span class="line">            //jsx遇大括号就当作js表达式来看待</span><br><span class="line">            //map返回的数组会自动展开</span><br><span class="line">            &#123;</span><br><span class="line">                this.props.textList.map(function(text) &#123;</span><br><span class="line">                    return <span class="tag">&lt;<span class="title">p</span>&gt;</span>text<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//像这样使用</span><br><span class="line">var TestComponent = React.createClass(&#123;</span><br><span class="line">    render: function() &#123;</span><br><span class="line">        return (</span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">MyComponent</span> <span class="attribute">className</span>=<span class="value">"组件内部的this.props.className来自它被调用时传递的参数，就是我啦"</span> <span class="attribute">textList</span>=<span class="value">&#123;['组件的this.props.textList',</span> '就是我啦', '用花括号包裹', '以便让<span class="attribute">jsx</span>将我作为数组直接量的表达式来看待']&#125; /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里才是插入dom，用React.render方法</span></span><br><span class="line"><span class="comment">//第一个参数为React组件，第二个参数为DOM</span></span><br><span class="line">React.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">TestComponent</span> /&gt;</span>,</span><br><span class="line">    document.body</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure></p>
<p>总的来说，reactjs允许我们用React.createClass来拓展React.createElement的参数范畴。</p>
<ul>
<li>默认情况下，它接受原生html标签，所以web Component普及后，reactjs也不会被淘汰，无非是多了一些html标签罢了</li>
<li>React.createClass方法，可以提供新的html标签给React.createElement，创造了封装复杂dom结构、组件化的空间</li>
</ul>
<h2 id="reactjs__u7684_u865A_u62DFdom"><a href="#reactjs__u7684_u865A_u62DFdom" class="headerlink" title="reactjs 的虚拟dom"></a>reactjs 的虚拟dom</h2><p>之前说了jsx的一半真相，另一半是，React.createElement并没有直接了当的用js构造dom，它构造了一种数据结构。</p>
<p>使用reactjs时，表面上我们在操作dom，其实是操作数据，reactjs通过自己的dom diff算法，对比前后的数据，找到diff差异点，按最小粒度更新视图。</p>
<p>正因如此，reactjs的UI层才是可替换的，构造另一套从数据到视图的映射逻辑，就能应用在canvas乃至手机原生UI上。</p>
<h2 id="reactjs__u7684_u5355_u5411_u6570_u636E_u6D41"><a href="#reactjs__u7684_u5355_u5411_u6570_u636E_u6D41" class="headerlink" title="reactjs 的单向数据流"></a>reactjs 的单向数据流</h2><p>reactjs组件内部的this.props对象，是组件实例的父级组件提供的，提供方式就像写html属性一样。</p>
<p>如此，父级复父级，数据可以从最顶层的组件实例，层层传递到最底层的组件中去，然而反过来却不行，这就是单向数据流的意思。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最底层的todo</span></span><br><span class="line"><span class="keyword">var</span> Todo = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">//只有html属性和data-*以及aria-*才会显示在dom中，其余的key或其他，是扩展性质的，便于向下级组件传递数据</span></span><br><span class="line">            &lt;li title=&#123;<span class="keyword">this</span>.props.time&#125; key=&#123;<span class="keyword">this</span>.props.id&#125;&gt;</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span>=<span class="value">&#123;this.props.completed&#125;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">label</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//todo的父级组件</span></span><br><span class="line"><span class="keyword">var</span> TodoList = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (&#123;</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">ul</span>&gt;</span>&#123;</span><br><span class="line">                this.props.todos.map(function(todo) &#123;</span><br><span class="line">                    //形如ES6的属性展开式语法，等价于用key=value的形式一个个书写</span><br><span class="line">                    return <span class="tag">&lt;<span class="title">Todo</span> &#123;<span class="attribute">...todo</span>&#125; /&gt;</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//todoList的父级组件</span><br><span class="line">var TodoApp = React.createClass(&#123;</span><br><span class="line">    render: function() &#123;</span><br><span class="line">        return (</span><br><span class="line">            <span class="tag">&lt;<span class="title">TodoList</span> <span class="attribute">todos</span>=<span class="value">&#123;this.props.todos&#125;</span> /&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟的todos数据</span></span><br><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(),</span><br><span class="line">    title: <span class="string">'第一个待办事项'</span>,</span><br><span class="line">    completed: <span class="literal">false</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    id: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(),</span><br><span class="line">    title: <span class="string">'第二个待办事项'</span>,</span><br><span class="line">    completed: <span class="literal">true</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染TodoApp组件到#todo-app，数据从TodoApp传递到TodoList,从TodoList传递到Todo,在Todo中展开为一种DOM结构并注入数据，展示在前端页面中</span></span><br><span class="line">React.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="title">TodoApp</span> <span class="attribute">todos</span>=<span class="value">&#123;data&#125;</span> /&gt;</span>,</span><br><span class="line">    document.getElementById('todo-app')</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h2><p>reactjs是有趣且富有生命力与表现力的javascript库，有其适用的场景，也有许多需要注意的事项与容易踩到的坑。</p>
<p>总体而言，学会它不会让人后悔（想想那些学angular1的同学吧）。</p>
<p>在此，可以去<a href="http://todomvc.com/" target="_blank" rel="external">TodoMVC</a> 下载react制作的mvc项目来参考学习<a href="http://todomvc.com/" target="_blank" rel="external">React-TodoMVC</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="reactjs__u662F_u4EC0_u4E48_uFF1F"><a href="#reactjs__u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="reactjs 是什么？"></a>reactjs 是什么？</h2><p>reactjs是来自facebook公司的用于构建用户界面的JavaScript库。</p>
<p>GitHub地址：<a href="https://github.com/facebook/react">https://github.com/facebook/react</a></p>
<h2 id="reactjs_u7684_u4E24_u4E2A_u884D_u751F_u9879_u76EE_u4E5F_u503C_u5F97_u6CE8_u610F_u3002"><a href="#reactjs_u7684_u4E24_u4E2A_u884D_u751F_u9879_u76EE_u4E5F_u503C_u5F97_u6CE8_u610F_u3002" class="headerlink" title="reactjs的两个衍生项目也值得注意。"></a>reactjs的两个衍生项目也值得注意。</h2><ul>
<li>react-native:用reactjs写手机app </li>
</ul>
<p>GitHub地址：<a href="https://github.com/facebook/react-native">https://github.com/facebook/react-native</a></p>
<ul>
<li>react-canvas:用canvas代替臃肿缓慢的DOM作为UI，在移动端获得能与原生应用媲美的流畅效果]]>
    
    </summary>
    
      <category term="ReactJS" scheme="http://sterne.me/tags/ReactJS/"/>
    
      <category term="js" scheme="http://sterne.me/tags/js/"/>
    
      <category term="react" scheme="http://sterne.me/tags/react/"/>
    
      <category term="前端" scheme="http://sterne.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建Hexo博客并部署到Github]]></title>
    <link href="http://sterne.me/2015/12/16/use-Hexo-add-GitPage/"/>
    <id>http://sterne.me/2015/12/16/use-Hexo-add-GitPage/</id>
    <published>2015-12-16T08:16:56.000Z</published>
    <updated>2016-01-15T03:56:32.970Z</updated>
    <content type="html"><![CDATA[<p>搭建Hexo博客并部署到Github的小细节</p>
<h2 id="git_SSH-key"><a href="#git_SSH-key" class="headerlink" title="git SSH-key"></a>git SSH-key</h2><h3 id="u5728_u672C_u5730_u6DFB_u52A0ssh-key_u7684_u8FC7_u7A0B_u4E2D_uFF0C_u6700_u597D_u662F_u76F4_u63A5_u56DE_u8F66_u4F7F_u7528_u9ED8_u8BA4_u7684_u914D_u7F6E"><a href="#u5728_u672C_u5730_u6DFB_u52A0ssh-key_u7684_u8FC7_u7A0B_u4E2D_uFF0C_u6700_u597D_u662F_u76F4_u63A5_u56DE_u8F66_u4F7F_u7528_u9ED8_u8BA4_u7684_u914D_u7F6E" class="headerlink" title="在本地添加ssh-key的过程中，最好是直接回车使用默认的配置"></a>在本地添加ssh-key的过程中，最好是直接回车使用默认的配置</h3><p>比如在passphrase时应直接回车，不然会生成SHA:256的key而还需要相关的转化</p>
<p>然后添加到github的ssh-key表单进行登记</p>
<a id="more"></a>
<h2 id="hexo__u914D_u7F6E"><a href="#hexo__u914D_u7F6E" class="headerlink" title="hexo 配置"></a>hexo 配置</h2><h3 id="u5728_config-yml_u6587_u4EF6_u91CC_u9762_u7684repo_u91CC_uFF0C_u5728windows_u4E0B_u6700_u597D_u7528https_u800C_u4E0D_u8981_u7528ssh_u94FE_u63A5"><a href="#u5728_config-yml_u6587_u4EF6_u91CC_u9762_u7684repo_u91CC_uFF0C_u5728windows_u4E0B_u6700_u597D_u7528https_u800C_u4E0D_u8981_u7528ssh_u94FE_u63A5" class="headerlink" title="在_config.yml文件里面的repo里，在windows下最好用https而不要用ssh链接"></a>在_config.yml文件里面的repo里，在windows下最好用https而不要用ssh链接</h3><h2 id="hexo_u547D_u4EE4"><a href="#hexo_u547D_u4EE4" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="u66F4_u65B0_u535A_u5BA2_u65F6_u8981_u6C42_u6309_u7167_u4E0B_u5217_u6B65_u9AA4_u8FDB_u884C"><a href="#u66F4_u65B0_u535A_u5BA2_u65F6_u8981_u6C42_u6309_u7167_u4E0B_u5217_u6B65_u9AA4_u8FDB_u884C" class="headerlink" title="更新博客时要求按照下列步骤进行"></a>更新博客时要求按照下列步骤进行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">详细操作可参考博客园文章</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建Hexo博客并部署到Github的小细节</p>
<h2 id="git_SSH-key"><a href="#git_SSH-key" class="headerlink" title="git SSH-key"></a>git SSH-key</h2><h3 id="u5728_u672C_u5730_u6DFB_u52A0ssh-key_u7684_u8FC7_u7A0B_u4E2D_uFF0C_u6700_u597D_u662F_u76F4_u63A5_u56DE_u8F66_u4F7F_u7528_u9ED8_u8BA4_u7684_u914D_u7F6E"><a href="#u5728_u672C_u5730_u6DFB_u52A0ssh-key_u7684_u8FC7_u7A0B_u4E2D_uFF0C_u6700_u597D_u662F_u76F4_u63A5_u56DE_u8F66_u4F7F_u7528_u9ED8_u8BA4_u7684_u914D_u7F6E" class="headerlink" title="在本地添加ssh-key的过程中，最好是直接回车使用默认的配置"></a>在本地添加ssh-key的过程中，最好是直接回车使用默认的配置</h3><p>比如在passphrase时应直接回车，不然会生成SHA:256的key而还需要相关的转化</p>
<p>然后添加到github的ssh-key表单进行登记</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://sterne.me/tags/git/"/>
    
      <category term="github" scheme="http://sterne.me/tags/github/"/>
    
      <category term="hexo" scheme="http://sterne.me/tags/hexo/"/>
    
      <category term="笔记" scheme="http://sterne.me/categories/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://sterne.me/2015/12/08/hello-world/"/>
    <id>http://sterne.me/2015/12/08/hello-world/</id>
    <published>2015-12-08T02:12:56.000Z</published>
    <updated>2016-01-15T04:05:14.185Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
</feed>
